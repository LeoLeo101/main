stringa <- "andrea" 
vettore<- c(8,4,7,1,2,7,4,8,9)

#R BASE----------------------------

sample(1:100,1) #generazione numeri casuali
round(2.345321,digits = 2) #arrotonda numeri
nchar(stringa) #numero di caratteri di una stringa
toupper(stringa) #rende maiuscola la stringa
paste(stringa, toupper(stringa)) #concatena due stringe con lo spazio in mezzo
paste0(stringa, toupper(stringa))#concatena due stringe senza lo spazio in mezzo
substr(stringa, 1, 3)#estrae una sottostringa
strsplit(stringa,"r") #divide una stringa dove trova un'altra stringa
grepl("r",stringa) #dice se è presente una determinata sottostringa in una stringa
gsub("r","RONOR",stringa) # sostituisce una sottostringa con un altra 
sort(vettore) #ordina un vettore
seq(1,100, by=5) #crea un vettore composto dai numeri da 1 a 100 lasciando 5 numeri di spazio
c(a=34,b=67,c=89)#crea un vettore nominato
sum(c(2,3,5,NA,3,1),na.rm = TRUE) #elimina i valori NA

#MATRICI VETTORI E ARRAY----------------------------

%*% #prodotto matriciale
t(matrice) #matrice trasposta
solve(matrice) #matrice inversa

#FACTOR-----------------------

#Un fattore è un tipo di dati utilizzato per rappresentare veriabili categoriche con un numero finito di livelli o categorie

v <- c("A","B","A","C","C","A")
fattore<- factor(v)
fattore

livelli<-c("A","B","C")
etichette<-c("Alto","Basso","Cacca")
fattore<-factor(v,levels = livelli, labels = etichette)
fattore

cut(sample(1:100,10),breaks = 3,labels = etichette) #separa una lista di valori (sample) in breaks = parti e applica le etichette a seconda che il numero cada in uno dei breaks

table(v) #fa le tabelle di frequenza

#INPUT/OUTPUT--------------------------------------

read.table()#fiel di testo
read.csv()
readLines()#file di testo
scan() #file di testo o input utente
write.csv()

#dplyr-------------------
library(dplyr)
mtcars

mtcarsfil<- mtcars %>%
  
  filter(mpg>10) %>%                    #filtra i dati
  select(mpg,cyl,hp) %>% #seleziona solo alcune colonne
  mutate(hp_per_cyl = hp/cyl) %>% #modifica delle colonne o come in questo caso ne crea delle nuove
  group_by(cyl)  %>% # raggruppa i dati in base al numero di cyl
  summarise(mean_mpg = mean(mpg)) #calcola la media di mpg per categoria di cyl
  
mtcarsfil <- mtcars %>%
  
  arrange(cyl) #ordina i dati
  
#FUNZIONI APPLY--------------------------------

lapply(list, function) #applica una funzione ad ogni elemento di una lista
sapply(list, function) #come lapply ma semplifica i risultati se possibile
vapply(list, function, tipo di output, ...) #come sapply ma richiede un tipo di output specifico
mapply(function, ...) #applica una funzione a più argomenti
apply(array, se a righe 1 se a colonne 2, funzione) # applica una funzine a matrici o array multidimensionali

#VISUALIZZAZIONE DATI-------------------------

#istogramma

x<- rnorm(1000)

hist(x, probability= TRUE,breaks = 20, col ="red", border = "white", main ="Istogramma", xlab="Valori", ylab="Frequenza")
lines(density(x), col="blue",lwd = 2)
abline(v=mean(x),lty = 3,col= "black",lwd=4)
text(mean(x),0.1,"Media",pos = 4,col = "black")
legend("topright", legend = c("Densità","Media"),col = c("blue","black"),lty=c(1,2),bty=" n")
arrows(-2,0.05,0,0.4,lwd=3,col = sample(1:30,1))
arrows(0,0.4,2,0.05,lwd=3,col = sample(1:30,1))



lty #Tipo di linea (1: continua, 2: tratteggiata, ecc.)
lwd #Spessore della linea (es. 1 = normale, 2 = doppio)
pch #Simbolo dei punti (1: cerchio vuoto, 16: pieno, ecc.)
col #Colore di linee, punti o testo (es. "red", "blue")
type #Tipo di grafico in plot() (es. "l": linee, "p")
cex #Scala dei simboli o del testo
bg #Colore di sfondo per simboli pieni (es. pch = 21-25)
main #Titolo principale del grafico
xlab #Etichetta asse x
ylab #Etichetta asse y



